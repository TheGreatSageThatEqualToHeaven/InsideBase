local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local random = Random.new()

-- Config
local MAX_RETRIES = 3
local MAX_FINAL_DISTANCE = 30
local VOID_CFRAME = CFrame.new(0, -3.4028234663852886e+38, 0)

-- Setup
local tpAmt = 70
local teleporting = false
local function GetHRP()
    local char = player.Character or player.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart", 5)
end

-- Jittered teleport function
local function TP(cframe)
    local hrp = GetHRP()
    if not hrp or teleporting then return end
    teleporting = true
    hrp.CFrame = cframe + Vector3.new(
        random:NextNumber(-0.0001, 0.0001),
        random:NextNumber(-0.0001, 0.0001),
        random:NextNumber(-0.0001, 0.0001)
    )
    task.wait()
    teleporting = false
end

-- Find your own plot's delivery hitbox
local function FindYourDelivery()
    local plots = workspace:FindFirstChild("Plots")
    if not plots then return nil end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        local yourBase = sign and sign:FindFirstChild("YourBase")
        if yourBase and yourBase.Enabled then
            return plot:FindFirstChild("DeliveryHitbox")
        end
    end
    return nil
end

-- Main teleport routine
local function TeleportToYourBase()
    local hrp = GetHRP()
    if not hrp then
        warn("[Teleport]: Could not get HRP.")
        return
    end

    local hitbox = FindYourDelivery()
    if not hitbox then
        warn("[Teleport]: Could not find DeliveryHitbox.")
        return
    end

    local target = hitbox.CFrame * CFrame.new(0, -3, 0)
    local success = false

    for attempt = 1, MAX_RETRIES do
        print("[Teleport]: Attempt", attempt)

        -- Phase 1: Spam teleport to target
        for i = 1, tpAmt do
            TP(target)
        end

        -- Phase 2: Void hop
        for i = 1, 2 do
            TP(VOID_CFRAME)
        end

        -- Phase 3: Final small-step teleports to target
        for i = 1, math.floor(tpAmt / 16) do
            TP(target)
        end

        task.wait(0.75)
        local distance = (hrp.Position - target.Position).Magnitude
        if distance <= MAX_FINAL_DISTANCE then
            print("[Teleport]: Success at distance", math.floor(distance))
            success = true
            break
        else
            warn("[Teleport]: Retry - Distance too far:", math.floor(distance))
        end
    end

    if not success then
        warn("[Teleport]: Failed after", MAX_RETRIES, "attempts.")
    end
end

-- ðŸš€ Execute
TeleportToYourBase()
