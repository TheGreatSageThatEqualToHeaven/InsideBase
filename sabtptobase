-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Local Player Setup
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")

-- Globals
local random = Random.new()
local teleporting = false
local void = CFrame.new(0, -3.4028235e+38, 0)
local tpAmt

-- Update character on respawn
player.CharacterAdded:Connect(function(newChar)
	char = newChar
	humanoid = char:WaitForChild("Humanoid")
	hrp = char:WaitForChild("HumanoidRootPart")
end)

-- Ping-based dynamic teleport amount
task.spawn(function()
	while true do
		local ping = player:GetNetworkPing() * 1000
		tpAmt = math.clamp(math.floor(ping * 0.7), 20, 90)
		RunService.Heartbeat:Wait()
	end
end)

-- Smooth teleport function with jitter
local function TP(position)
	if typeof(position) ~= "CFrame" or not hrp then return end
	local jitter = Vector3.new(
		random:NextNumber(-0.0001, 0.0001),
		random:NextNumber(-0.0001, 0.0001),
		random:NextNumber(-0.0001, 0.0001)
	)
	hrp.CFrame = position + jitter
	RunService.Heartbeat:Wait()
end

-- Find your own plot
local function findYourPlot()
	local plotsFolder = workspace:FindFirstChild("Plots")
	if not plotsFolder then return nil end

	for _, plot in pairs(plotsFolder:GetChildren()) do
		local plotSign = plot:FindFirstChild("PlotSign")
		local textLabel = plotSign and plotSign:FindFirstChild("SurfaceGui")
			and plotSign.SurfaceGui:FindFirstChild("Frame")
			and plotSign.SurfaceGui.Frame:FindFirstChild("TextLabel")

		if textLabel then
			local nameMatch = textLabel.Text:lower():find(player.Name:lower() .. "[´'`]s base")
			if nameMatch then return plot end
		end
	end
	return nil
end

-- Main reliable teleport system WITHOUT re-teleport on displacement
local function GuaranteedTeleportToMultiplier()
	local yourPlot = findYourPlot()
	if not yourPlot then 
		warn("Your base not found.") 
		return 
	end

	local multiplier = yourPlot:FindFirstChild("Multiplier")
	if not multiplier or not multiplier:IsA("BasePart") then
		warn("Multiplier not found.")
		return
	end

	local target = multiplier.CFrame * CFrame.new(0, 2, 0)

	local function distanceOK()
		if not hrp then return false end
		local dist = (hrp.Position - target.Position).Magnitude
		return dist < 5
	end

	local maxRetries = 30
	local retry = 0

	-- Teleport attempts until close enough or maxRetries reached
	while not distanceOK() and retry < maxRetries do
		-- Phase 1: Initial rapid teleport
		for i = 1, 15 do TP(target) end

		-- Void phase to reset any stuck states
		TP(void)
		RunService.Heartbeat:Wait()
		TP(void)
		RunService.Heartbeat:Wait()

		-- Final correction phase
		for i = 1, 6 do TP(target) end

		retry += 1
	end

	if distanceOK() then
		print("[✓] Final position OK.")
	else
		warn("[✗] Could not reach multiplier reliably after " .. maxRetries .. " retries.")
	end

	-- NO monitoring or re-teleporting loop here
end

-- Run it
GuaranteedTeleportToMultiplier()
